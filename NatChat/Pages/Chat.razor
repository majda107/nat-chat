@page "/chat"
@using System.Text
@inject ChatService cs;

<h3>Chat</h3>

<span>Magic token: @this.cs.Processor.Me.Token</span>

<ul>
    @foreach (var m in messages)
    {
        <li>
            @m
        </li>
    }
</ul>

<input placeholder="message" @bind="message">
<button class="btn btn-primary" @onclick="() => { Send(); }">Send</button>
<button class="btn btn-danger" @onclick="() => { SendRaw(); }">[Send raw]</button>

<button class="btn btn-warning" @onclick="() => { SendAllUsers(); }">[Send all users]</button>
<button class="btn-warning" @onclick="() => { RequestKeepalive(); }">[Request Keepalive]</button>

<hr/>

<Users></Users>


@code {
    private List<string> messages = new List<string>();

    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        cs.Processor.Logger.OnLog += (o, e) =>
        {
            messages.Add(e);
            this.InvokeAsync(this.StateHasChanged);
        };

        this.StateHasChanged();
    }

    private void Send()
    {
        cs.Processor.Send(new Packet {Cmd = PacketType.Message, Value = message});
        this.messages.Add($"[YOU] {message}");

        this.message = "";
        this.StateHasChanged();
    }

    private void SendRaw()
    {
        cs.Processor.SendRaw(this.message);
        this.messages.Add($"[YOU RAW] {message}");

        this.message = "";
        this.StateHasChanged();
    }

    private void SendAllUsers()
    {
        var col = cs.Processor.Remotes.Select(s => s.Token);
        cs.Processor.Send(new Packet {Cmd = PacketType.Discover, Value = String.Join(';', col)});
    }

    private void RequestKeepalive()
    {
        cs.Processor.Send(new Packet {Cmd = PacketType.Keepalive});
    }

}