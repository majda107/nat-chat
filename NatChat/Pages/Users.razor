@inject ChatService cs;

<h3>Users</h3>

<ul>
    @foreach (var user in this.cs.Processor.Remotes)
    {
        @if (user.Suspended)
        {
            <li style="color: red">
                @user.Alias - @user.Endpoint - @user.Token - SUSPENDED
            </li>
        }
        else if (user.PastSeconds > 60)
        {
            <li class="old">
                @user.Alias - @user.Endpoint - @user.Token - @(user.PastSeconds)s ago
            </li>
        }
        else
        {
            <li>
                @user.Alias - @user.Endpoint - @user.Token - @(user.PastSeconds)s ago
            </li>
        }
    }
</ul>

<input placeholder="token" @bind="token"/>
<input placeholder="alias" @bind="alias"/>

<button class="btn btn-success" @onclick="() => { Add(); }">Add</button>

@code {

    private string token = "";
    private string alias = "";

    protected override async Task OnInitializedAsync()
    {
        this.cs.Processor.KeepaliveTick += (o, e) => this.InvokeAsync(this.StateHasChanged);
    }

    private void Add()
    {
        this.cs.Processor.AddEndpoint(new MagicUser(this.token, this.alias));
        this.cs.Processor.Send(new Packet {Cmd = PacketType.Discover, Value = this.token});

        this.token = this.alias = "";
        this.StateHasChanged();
    }

}